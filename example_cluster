import os
import time
from optimized_schema_graph import OptimizedQueryProcessor

def main():
    """
    Demonstrate usage of the OptimizedQueryProcessor with a sample database.
    """
    # Path to your SQLite database
    db_file = "your_database.sqlite"
    
    # Check if database exists
    if not os.path.exists(db_file):
        print(f"Error: Database file '{db_file}' not found.")
        print("Please update the path to your database file.")
        return
    
    # Initialize the query processor
    print(f"Initializing query processor with database: {db_file}")
    start_time = time.time()
    processor = OptimizedQueryProcessor(db_file)
    print(f"Initialization completed in {time.time() - start_time:.2f} seconds\n")
    
    # Process some example queries
    example_queries = [
        "Find all customers who have placed orders in the last month",
        "Show products with the highest sales volume",
        "List employees who manage more than 5 people and have been at the company for over 3 years",
        "What is the average order value for each product category?"
    ]
    
    for i, query in enumerate(example_queries):
        print(f"Example {i+1}: '{query}'")
        
        # Process the query
        start_time = time.time()
        results = processor.process_query(query)
        processing_time = time.time() - start_time
        
        # Print results
        print(f"  Processing time: {processing_time:.2f} seconds")
        print(f"  Decomposed into {len(results['subqueries'])} subqueries:")
        
        for j, subquery_result in enumerate(results['subquery_results']):
            print(f"    {subquery_result['subquery_id']}: '{subquery_result['subquery_text']}'")
            
            # Print paths
            print(f"    Found {len(subquery_result['top_paths'])} relevant paths:")
            for k, path in enumerate(subquery_result['top_paths'][:2]):
                print(f"      Path {k+1}: {path}")
            
            if len(subquery_result['top_paths']) > 2:
                print(f"      ... and {len(subquery_result['top_paths'])-2} more paths")
            
            # Print generated SQL
            print(f"    Generated {len(subquery_result['sql_statements'])} SQL statements:")
            for k, sql in enumerate(subquery_result['sql_statements']):
                print(f"      SQL {k+1}: {sql}")
            
            print()
        
        # Optional: Execute the first SQL statement
        if results['subquery_results'] and results['subquery_results'][0]['sql_statements']:
            first_sql = results['subquery_results'][0]['sql_statements'][0]
            print("  Executing first SQL statement:")
            print(f"    {first_sql}")
            
            # Uncomment to actually execute
            # query_results = processor.execute_sql(first_sql)
            # if "error" in query_results:
            #     print(f"    Error: {query_results['error']}")
            # else:
            #     print(f"    Found {len(query_results['rows'])} rows")
            #     print(f"    Columns: {', '.join(query_results['columns'])}")
            #     for row in query_results['rows'][:3]:
            #         print(f"    {row}")
            #     if len(query_results['rows']) > 3:
            #         print(f"    ... and {len(query_results['rows'])-3} more rows")
        
        print("\n" + "="*80 + "\n")

if __name__ == "__main__":
    main()
